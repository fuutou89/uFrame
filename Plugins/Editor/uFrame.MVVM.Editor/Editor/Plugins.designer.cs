// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using uFrame.Editor;
using uFrame.Editor.Configurations;
using uFrame.Editor.Graphs.Data;
using uFrame.Editor.GraphUI;
using uFrame.Editor.GraphUI.Drawers;
using uFrame.Editor.TypesSystem;
using uFrame.IOC;

namespace uFrame.MVVM {
    
    
    public class uFrameMVVMBase : DiagramPlugin {
        
        private NodeConfig<ServiceNode> _Service;
        
        private NodeConfig<SimpleClassNode> _SimpleClass;
        
        private NodeConfig<SubSystemNode> _SubSystem;
        
        private NodeConfig<ViewNode> _View;
        
        private NodeConfig<SceneTypeNode> _SceneType;
        
        private NodeConfig<ElementNode> _Element;
        
        private NodeConfig<CommandNode> _Command;
        
        private NodeConfig<MVVMNode> _MVVM;
        
        public NodeConfig<ServiceNode> Service {
            get {
                return _Service;
            }
            set {
                _Service = value;
            }
        }
        
        public NodeConfig<SimpleClassNode> SimpleClass {
            get {
                return _SimpleClass;
            }
            set {
                _SimpleClass = value;
            }
        }
        
        public NodeConfig<SubSystemNode> SubSystem {
            get {
                return _SubSystem;
            }
            set {
                _SubSystem = value;
            }
        }
        
        public NodeConfig<ViewNode> View {
            get {
                return _View;
            }
            set {
                _View = value;
            }
        }
        
        public NodeConfig<SceneTypeNode> SceneType {
            get {
                return _SceneType;
            }
            set {
                _SceneType = value;
            }
        }
        
        public NodeConfig<ElementNode> Element {
            get {
                return _Element;
            }
            set {
                _Element = value;
            }
        }
        
        public NodeConfig<CommandNode> Command {
            get {
                return _Command;
            }
            set {
                _Command = value;
            }
        }
        
        public NodeConfig<MVVMNode> MVVM {
            get {
                return _MVVM;
            }
            set {
                _MVVM = value;
            }
        }
        
        public virtual SelectTypeCommand GetPropertiesSelectionCommand() {
            return new SelectTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual SelectTypeCommand GetCollectionsSelectionCommand() {
            return new SelectTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual SelectTypeCommand GetCommandsSelectionCommand() {
            return new SelectTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public override void Initialize(UFrameContainer container) {
            container.AddTypeItem<CommandsChildItem>();
            container.AddItem<HandlersReference>();
            container.AddTypeItem<PropertiesChildItem>();
            container.AddItem<InstancesReference>();
            container.AddTypeItem<CollectionsChildItem>();
            container.AddItem<BindingsReference>();
            Service = container.AddNode<ServiceNode,ServiceNodeViewModel,ServiceNodeDrawer>("Service");
            Service.Inheritable();
            Service.Color(NodeColor.LightGray);
            Service.HasSubNode<SimpleClassNode>();
            SimpleClass = container.AddNode<SimpleClassNode,SimpleClassNodeViewModel,SimpleClassNodeDrawer>("SimpleClass");
            SimpleClass.Inheritable();
            SimpleClass.Color(NodeColor.Gray);
            SubSystem = container.AddGraph<SubSystemGraph, SubSystemNode>("SubSystemGraph");
            SubSystem.Color(NodeColor.Blue);
            SubSystem.HasSubNode<ServiceNode>();
            SubSystem.HasSubNode<SimpleClassNode>();
            SubSystem.HasSubNode<ElementNode>();
            SubSystem.HasSubNode<CommandNode>();
            View = container.AddNode<ViewNode,ViewNodeViewModel,ViewNodeDrawer>("View");
            View.Inheritable();
            View.Color(NodeColor.Royalblue2);
            SceneType = container.AddNode<SceneTypeNode,SceneTypeNodeViewModel,SceneTypeNodeDrawer>("SceneType");
            SceneType.Inheritable();
            SceneType.Color(NodeColor.Orange);
            Element = container.AddNode<ElementNode,ElementNodeViewModel,ElementNodeDrawer>("Element");
            Element.Inheritable();
            Element.Color(NodeColor.Yellow);
            Element.HasSubNode<SimpleClassNode>();
            Element.HasSubNode<ViewNode>();
            Element.HasSubNode<CommandNode>();
            Command = container.AddNode<CommandNode,CommandNodeViewModel,CommandNodeDrawer>("Command");
            Command.Inheritable();
            Command.Color(NodeColor.Red);
            MVVM = container.AddGraph<MVVMGraph, MVVMNode>("MVVMGraph");
            MVVM.Color(NodeColor.DarkGray);
            MVVM.HasSubNode<SimpleClassNode>();
            MVVM.HasSubNode<SubSystemNode>();
            MVVM.HasSubNode<SceneTypeNode>();
            MVVM.HasSubNode<ServiceNode>();
            container.Connectable<ElementNode,Element>();
            container.Connectable<HandlersReference,SimpleClassNode>();
            container.Connectable<PropertiesChildItem,SceneProperties>();
        }
    }
}
