// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using uFrame.Editor.Graphs.Data;
using uFrame.Editor.GraphUI.ViewModels;
using uFrame.Editor.Platform;

namespace uFrame.ECS.Editor
{
    using Nodes;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using ViewModels;

    public class CustomActionNodeViewModelBase : SequenceContainerNodeViewModel {
        
        public CustomActionNodeViewModelBase(CustomActionNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class DataNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public DataNodeViewModelBase(DataNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class LibraryNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public LibraryNodeViewModelBase(LibraryNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class NullNodeViewModelBase : LiteralNodeViewModel {
        
        public NullNodeViewModelBase(NullNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class StringLiteralNodeViewModelBase : VariableNodeViewModel {
        
        public StringLiteralNodeViewModelBase(StringLiteralNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class PropertyNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public PropertyNodeViewModelBase(PropertyNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class StringNodeViewModelBase : LiteralNodeViewModel {
        
        public StringNodeViewModelBase(StringNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class ActionGroupNodeViewModelBase : SequenceItemNodeViewModel {
        
        public ActionGroupNodeViewModelBase(ActionGroupNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class StopTimerNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public StopTimerNodeViewModelBase(StopTimerNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class FunctionNodeViewModelBase : SequenceItemNodeViewModel {
        
        public FunctionNodeViewModelBase(FunctionNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class BoolNodeViewModelBase : LiteralNodeViewModel {
        
        public BoolNodeViewModelBase(BoolNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class ModuleNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public ModuleNodeViewModelBase(ModuleNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class AnyFalseNodeViewModelBase : BoolExpressionNodeViewModel {
        
        public AnyFalseNodeViewModelBase(AnyFalseNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class CodeActionNodeViewModelBase : ActionNodeViewModel {
        
        public CodeActionNodeViewModelBase(CodeActionNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class BoolExpressionNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public BoolExpressionNodeViewModelBase(BoolExpressionNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class FloatNodeViewModelBase : LiteralNodeViewModel {
        
        public FloatNodeViewModelBase(FloatNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class UserMethodNodeViewModelBase : SequenceItemNodeViewModel {
        
        public UserMethodNodeViewModelBase(UserMethodNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class LoopCollectionNodeViewModelBase : SequenceItemNodeViewModel {
        
        public LoopCollectionNodeViewModelBase(LoopCollectionNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class ComponentCreatedNodeViewModelBase : HandlerNodeViewModel {
        
        public ComponentCreatedNodeViewModelBase(ComponentCreatedNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class SetVariableNodeViewModelBase : SequenceItemNodeViewModel {
        
        public SetVariableNodeViewModelBase(SetVariableNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class AnyTrueNodeViewModelBase : BoolExpressionNodeViewModel {
        
        public AnyTrueNodeViewModelBase(AnyTrueNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class CollectionItemRemovedNodeViewModelBase : CollectionModifiedHandlerNodeViewModel {
        
        public CollectionItemRemovedNodeViewModelBase(CollectionItemRemovedNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class CollectionModifiedHandlerNodeViewModelBase : HandlerNodeViewModel {
        
        public CollectionModifiedHandlerNodeViewModelBase(CollectionModifiedHandlerNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class ObjectNodeViewModelBase : LiteralNodeViewModel {
        
        public ObjectNodeViewModelBase(ObjectNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class PropertyChangedNodeViewModelBase : HandlerNodeViewModel {
        
        public PropertyChangedNodeViewModelBase(PropertyChangedNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class VariableNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public VariableNodeViewModelBase(VariableNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class GroupNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public GroupNodeViewModelBase(GroupNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class DescriptorNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public DescriptorNodeViewModelBase(DescriptorNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class Vector3NodeViewModelBase : LiteralNodeViewModel {
        
        public Vector3NodeViewModelBase(Vector3Node graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class EventNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public EventNodeViewModelBase(EventNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class LiteralNodeViewModelBase : VariableNodeViewModel {
        
        public LiteralNodeViewModelBase(LiteralNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class ComponentNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public ComponentNodeViewModelBase(ComponentNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class AllFalseNodeViewModelBase : BoolExpressionNodeViewModel {
        
        public AllFalseNodeViewModelBase(AllFalseNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class IntNodeViewModelBase : LiteralNodeViewModel {
        
        public IntNodeViewModelBase(IntNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class CollectionItemAddedNodeViewModelBase : CollectionModifiedHandlerNodeViewModel {
        
        public CollectionItemAddedNodeViewModelBase(CollectionItemAddedNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class ComponentDestroyedNodeViewModelBase : HandlerNodeViewModel {
        
        public ComponentDestroyedNodeViewModelBase(ComponentDestroyedNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class Vector2NodeViewModelBase : LiteralNodeViewModel {
        
        public Vector2NodeViewModelBase(Vector2Node graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class SequenceContainerNodeViewModelBase : SequenceItemNodeViewModel {
        
        public SequenceContainerNodeViewModelBase(SequenceContainerNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class AllTrueNodeViewModelBase : BoolExpressionNodeViewModel {
        
        public AllTrueNodeViewModelBase(AllTrueNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class StartTimerNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public StartTimerNodeViewModelBase(StartTimerNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class ConditionNodeViewModelBase : BoolExpressionNodeViewModel {
        
        public ConditionNodeViewModelBase(ConditionNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class ActionNodeViewModelBase : SequenceItemNodeViewModel {
        
        public ActionNodeViewModelBase(ActionNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class HandlerNodeViewModelBase : SequenceContainerNodeViewModel {
        
        public HandlerNodeViewModelBase(HandlerNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class SystemNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public SystemNodeViewModelBase(SystemNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class EntityNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public EntityNodeViewModelBase(EntityNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class ColorNodeViewModelBase : LiteralNodeViewModel {
        
        public ColorNodeViewModelBase(ColorNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Normal;
            }
        }
    }
    
    public class EnumValueNodeViewModelBase : LiteralNodeViewModel {
        
        public EnumValueNodeViewModelBase(EnumValueNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
    
    public class SequenceItemNodeViewModelBase : GenericNodeViewModel<GenericNode> {
        
        public SequenceItemNodeViewModelBase(SequenceItemNode graphItemObject, DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override NodeStyle NodeStyle {
            get {
                return NodeStyle.Minimalistic;
            }
        }
    }
}
